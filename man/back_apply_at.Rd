% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities.R
\name{back_apply_at}
\alias{back_apply_at}
\title{Apply function at last N levels of a nested list}
\usage{
back_apply_at(lst, f, n)
}
\arguments{
\item{lst}{a list to be applied by the function}

\item{f}{a function to apply on \code{lst}}

\item{n}{a numeric value indicating the nth level to be applied backward counting from deepest level}
}
\description{
Recursively traverse a nested list and apply a function at the Nth level backward counting from deepest level
}
\examples{
\dontrun{
dt <- list(a1=list(
               b11=list(c111=1, c112=2,c113=3),
               b12=list(c121=4, c122=5,c123=6)),
           a2=list(
               b21=list(c211=7, c212=8,c213=9),
               b22=list(c221=10, c222=11,c223=12))
               )
      )

back_apply_at(dt, function(x) x+1, 1) # This will apply `function(x) x+1` to the deepest level of `dt`, i.e. 1st level counting backward from deepest level

}
}
