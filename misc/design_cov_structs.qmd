# Design doc for additional covariance structures

## Objectives

- Add the additional structured covariance models as options also for `method_bayes` via argument `covariance = c("us", "ad", "adh", "ar1", "ar1h", "cs", "csh", "toep", "toeph")`
- Use pragmatic default priors, based on the initial frequentist model fit, for the covariance model parameters, with the possibility to add multiple prior choices
  - In particular, add the LKJ prior as an option for the unstructured covariance model (good to have a precedent for the additional flexibility, plus we have seen better performance with LKJ vs. InvWish)
- Avoid duplicated code in the backend Stan implementation, e.g. via using experience from the `jmpost` and/or `brms` packages' Stan code templating mechanisms

## User interface

The changes to the user interface are restricted to the `method_bayes` function. The proposal is to have the new signature:

```r
method_bayes(
    covariance = c("us", "ad", "adh", "ar1", "ar1h", "cs", "csh", "toep", "toeph"),
    same_cov = TRUE,
    prior_cov = c("default", "lkj"),
    n_samples = 20,
    control = control_bayes()    
)
```

- Note that we could use this update of the package to remove the previously deprecated arguments `burn_in` and `burn_between` from the `method_bayes` function. Thereby we avoid having too many arguments in the function signature.
- The new argument `covariance` is finally aligning this function's signature to the other `method_*` functions, which all have the same `covariance` argument already.

### Specifying the prior on the covariance model parameters 

The new argument `prior_cov` allows the user to choose between the default priors (which apply to all covariance structures and are detailed in the function documentation and statistical specifications vignette) and the LKJ prior, which is only available for the unstructured covariance model. In the future, additional options (which might only be available for a subset of covariance structures) could be added here. Generally, we don't aim here for full flexibility (unlike the `brms` package e.g.), but rather a pragmatic set of default options with a few predefined alternatives, which are likely only used by experts in specific situations.

We have here a slight disadvantage in that the `covariance` and `prior_cov` arguments are not fully independent, and this needs to be cross-checked internally in the function with informative error messages if the user tries to use the LKJ prior with a covariance structure other than "us". However, like this we can keep the user interface in line with the other `method_*` functions. 

An alternative would be to move the `prior_cov` argument to the `control_bayes` function, but it seems out of place there, as it is not about controlling the MCMC sampling process, but rather about the prior specification for the covariance model.

## Implementation

Let's think about how to implement the use of the covariance structures with the respective priors in the `rbmi` package.

### `method_bayes`

Now it returns a list with the additional elements `covariance` and `prior_cov`, which are set to the values of the respective arguments. The function also checks that the `prior_cov` argument is only used with the unstructured covariance model, and throws an informative error message otherwise.

### `fit_mcmc`

While the signature is unchanged, internally the function uses the new elements of the `method` argument:

- The initial `fit_mmrm()` call passes the `covariance` choice to the `cov_struct` argument.
- The currently directly included assignment of the `Sigma_init` element of `stan_data` is replaced by a call to a `prepare_prior_params` function, which modifies the `stan_data` list to include the required prior parameters for the covariance model, based on the `covariance` and `prior_cov` arguments as well as the result from `mmrm_initial`.
  - For example, for the `ar1` covariance structure, instead of `Sigma_init`, `rho` and `sd` parameters will be assigned in the `stan_data` list. 
  - Ideally we can avoid the `_init` wording in the new code, because it is confusing - the `Sigma_init` so far here is the center of the inverse Wishart prior distribution, and just coincidentally also the initial value for the MCMC sampling. E.g. we can use a `_par` suffix instead.
- The most significant change will be the actual Stan model that is returned by `get_stan_model`, now the call will need to accept the `covariance` and `prior_cov` arguments.
- Choosing the parameters to return the samples for, we can add the relevant covariance model parameters to the `pars` element of the `sampling_args` list. This can be nice later for debugging purposes or more advanced print statements of the model object e.g.
- Note that the `extract_draws` function does not need to be modified and can focus on the `beta` and `Sigma` samples going forward. For debugging purposes, the user could still investigate the returned `fit` element of the list which will have the additional model parameter samples, too.

### `complete_control_bayes`

The code part where the `init` element of the `control` list is assigned in case of the `"mmrm"` initial values option, we will need to generalize the contents: Instead of always assigning `sigma`, we use a new function `prepare_init_vals` which returns the correct initial values for the covariance model parameters, based on the `covariance` and `prior_cov` arguments.

### `prepare_init_vals`

New function that prepares the initial values for the covariance model parameters based on the `covariance` and `prior_cov` arguments. This function will be called in the `complete_control_bayes` function to set the initial values in the `control` list.

### `prepare_prior_params`

New function that prepares the prior parameters for the covariance model based on the `covariance` and `prior_cov` arguments. This function will be called in the `fit_mcmc` function to set the prior parameters in the `stan_data` list.

### `fit_mmrm`

Slight modifications are needed here because for structured covariance models we will need to extract additional parameter estimates from the initial frequentist model fit, e.g. for the `ar1` covariance structure we will need to extract the `rho` and `sd` parameters in addition to `sigma`.

### `extract_params`

The actual extraction will be implemented here. Note that the conversion of `theta` parameters to covariance parameters could be moved into the `{mmrm}` package for the actual implementation, because it is of general interest. 

### `get_stan_model`

Now this takes the `covariance` and `prior_cov` arguments and returns the appropriate Stan model code based on these arguments.

Currently, this function just finds the fixed Stan model file `stan/MMRM.stan`, copies it to the cache directory, and then creates the `rstan` model object from it and returns it.

Now, we can work with building blocks of the Stan code, which are then combined using the `jinjar` templating mechanism, similar to how it is done in the `jmpost` package using the `decorated_render` function (which is wrapping the `jinjar` function).
We will keep things simpler here, because we don't need the full flexibility to provide user-defined Stan code snippets, but rather just a few predefined options for the covariance structures and priors.

Specifically, it seems like we could still have a single `MMRM.stan` file, which is templated, see e.g. [`lm-gsf/model.stan`](https://github.com/Genentech/jmpost/blob/main/inst/stan/lm-gsf/model.stan) for comparison. Since with `jinjar` we can also perform string comparisons (see [here](https://davidchall.github.io/jinjar/articles/template-syntax.html#comparisons)) we can use this to include the relevant code snippets for the covariance structures and priors based on the `covariance` and `prior_cov` string arguments.

### `get_session_hash`

This needs now to also take into account the `covariance` and `prior_cov` arguments, because with them the final Stan model code will change, and thus the cache key needs to be different.

### `MMRM.stan`

This is now a templated Stan model file, which includes the relevant code snippets for the covariance structures and priors based on the `covariance` and `prior_cov` arguments.

Relevant function definitions are only included if needed to keep the Stan model compilation time minimal.

We note that the rendered Stan model file will not have perfect indentation. However, we prefer to keep the template file readable, with indentations for the `jinjar` control flow. 

## Prototypes

Because we need to modify Stan code files, it seems simpler in this case to show the prototypes in a separate branch of the `rbmi` package, which can then later be used as a starting point for the full implementation.

We use the branch `501_prototype_cov_structs` for this purpose, where we show how to:

1. Implement the new `covariance` argument with the simple `ar1` alternative choice.
1. Implement the `prior_cov` argument with the default and LKJ prior choices.

Additional tests have been added to demonstrate the functionality. In particular, full usage tests have been added to `test-fullusage.R`.

We have not yet adjusted the documentation there - this will be done once the design doc is merged and actual implementation starts. 